name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # 환경별 yml 파일 생성(2) - prod
    - name: make application-secret.properties
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application-secret.properties
        echo "${{ secrets.PROPERTIES }}" > ./application-secret.properties
      shell: bash

    # gradle chmod
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # gradle build
    - name: Build with Gradle
      run: ./gradlew clean build -x test -Dspring.profiles.active=secret

      # docker login
    - name: Docker Hub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
        docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/lodestar .
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/lodestar
        
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker stop lodestar

          sudo docker rm lodestar

          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/lodestar

          sudo docker run -d -p 8080:8080 --name lodestar --network lodestar ${{ secrets.DOCKERHUB_USERNAME }}/lodestar

          sudo docker image prune -f
